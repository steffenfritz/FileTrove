name: Windows - x86_64 Build YARA-X C API and Go Binary

on:
  workflow_dispatch:  # Enable manual triggering

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      # Installiere Rust auf Windows
      - name: Set up Rust
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      # Cache Rust build
      - name: Cache Rust build
        uses: actions/cache@5a3ec84 # v4.2.3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Installiere cargo-c (wird benötigt, um die Rust C-API zu bauen)
      - name: Install cargo-c
        run: cargo install cargo-c

      # Set up Go auf Windows
      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23.1'

      # Klone YARA-X Repository und baue die C-API
      - name: Clone YARA-X repository
        run: git clone https://github.com/VirusTotal/yara-x.git

      - name: Build YARA-X C API and locate .pc file
        run: |
          cd yara-x
          git checkout tags/v0.10.0
          rustup target add x86_64-pc-windows-gnu  # MinGW-Target hinzufügen
          cargo cinstall -p yara-x-capi --release --target=x86_64-pc-windows-gnu --destdir=$env:USERPROFILE\\yara_install
          # Suche die .pc Datei und setze den Pfad
          $PC_FILE = Get-ChildItem -Recurse -Filter "yara_x_capi.pc" $env:USERPROFILE\\yara_install
          if (-not $PC_FILE) {
            Write-Error "Error: yara_x_capi.pc not found"
            exit 1
          }
          $PC_DIR = Split-Path $PC_FILE.FullName
          Write-Host "Found yara_x_capi.pc in $PC_DIR"
          $env:PKG_CONFIG_PATH = $PC_DIR
          Write-Host "Setting PKG_CONFIG_PATH to $PC_DIR"
          # Debug Ausgabe
          Get-ChildItem $PC_DIR

      # Klone FileTrove Repository
      - name: Clone FileTrove repository
        run: git clone https://github.com/steffenfritz/FileTrove.git

      # Setze die Umgebungsvariablen für pkg-config und Go
      - name: Set environment variables for pkg-config and Go
        run: |
          $env:PKG_CONFIG_PATH = "$env:USERPROFILE\\yara_install\\lib\\pkgconfig"
          $env:CGO_CFLAGS = "-I$env:USERPROFILE\\yara_install\\include"
          $env:CGO_LDFLAGS = "-L$env:USERPROFILE\\yara_install\\lib"
          # Debug: Zeige den Inhalt des pkg-config-Pfads
          Get-ChildItem $env:PKG_CONFIG_PATH
          # Verifiziere pkg-config und CFLAGS
          pkg-config --cflags --libs yara_x_capi

      # Baue das Go-Binary mit der Rust-Bibliothek
      - name: Build Go Binary
        run: |
          $env:PKG_CONFIG_PATH = "$env:USERPROFILE\\yara_install\\lib\\pkgconfig"
          $env:CGO_CFLAGS = "-I$env:USERPROFILE\\yara_install\\include"
          $env:CGO_LDFLAGS = "-L$env:USERPROFILE\\yara_install\\lib"
          cd FileTrove\\cmd\\ftrove
          go build -v

      # Artefakte-Verzeichnis erstellen im GITHUB_WORKSPACE
      - name: Create artifacts directory
        run: New-Item -ItemType Directory -Force -Path $env:GITHUB_WORKSPACE\\artifacts

      # Debugging dll search
      - name: Find dll
        run: |
          Get-ChildItem -Path "$env:USERPROFILE" -Recurse -Filter "yara_x_capi*"
          Get-ChildItem -Path "D:\" -Recurse -Filter "yara_x_capi*"


      # Kopiere Artefakte in das Verzeichnis
      - name: Copy artifacts

        run: |
          $dllFile = Get-ChildItem -Path "$env:USERPROFILE\\yara_install\\bin" -Recurse -Filter "yara_x_capi.dll" | Select-Object -First 1
          if (-not $dllFile) {
          Write-Error "DLL file not found in yara_install directory!"
          exit 1
          }
          $dllAFile = Get-ChildItem -Path "$env:USERPROFILE\\yara_install\\lib" -Recurse -Filter "yara_x_capi.dll.a" | Select-Object -First 1
          if (-not $dllFile) {
          Write-Error "DLL object file not found in yara_install directory!"
          exit 1
          }


          Copy-Item -Path $dllFile.FullName -Destination "$env:GITHUB_WORKSPACE\\artifacts"
          Copy-Item -Path $dllAFile.FullName -Destination "$env:GITHUB_WORKSPACE\\artifacts"
          Copy-Item "$env:GITHUB_WORKSPACE\\FileTrove\\cmd\\ftrove\\ftrove.exe" -Destination "$env:GITHUB_WORKSPACE\\artifacts"

      # Erstelle ein ZIP-Archiv der Artefakte im GITHUB_WORKSPACE
      - name: Create archive of artifacts
        run: |
          Compress-Archive -Path "$env:GITHUB_WORKSPACE\\artifacts\\*" -DestinationPath "$env:GITHUB_WORKSPACE\\windows_x86_64_artifacts.zip"
          if (!(Test-Path -Path "$env:GITHUB_WORKSPACE\\windows_x86_64_artifacts.zip")) {
            Write-Error "ZIP archive not found!"
          }

      # Lade das ZIP-Archiv der Artefakte hoch
      - name: Upload artifacts
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: build-artifacts
          path: ${{ github.workspace }}\\windows_x86_64_artifacts.zip


